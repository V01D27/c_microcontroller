
millis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b0  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d4  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031e  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013c  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <avr/io.h>
#include "millis.h"
#include <avr/interrupt.h>

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <main+0x8>
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
	millis_init();
  8e:	0e 94 c9 00 	call	0x192	; 0x192 <millis_init>
	sei();
  92:	78 94       	sei
	uint64_t speicher = millis_get();
  94:	0e 94 d5 00 	call	0x1aa	; 0x1aa <millis_get>
  98:	62 2e       	mov	r6, r18
  9a:	73 2e       	mov	r7, r19
  9c:	84 2e       	mov	r8, r20
  9e:	95 2e       	mov	r9, r21
  a0:	6d 83       	std	Y+5, r22	; 0x05
  a2:	79 83       	std	Y+1, r23	; 0x01
  a4:	8a 83       	std	Y+2, r24	; 0x02
  a6:	9b 83       	std	Y+3, r25	; 0x03
	
	while(1)
	{
		if (millis_get() >= speicher+ 100)
  a8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <millis_get>
  ac:	2c 83       	std	Y+4, r18	; 0x04
  ae:	23 2e       	mov	r2, r19
  b0:	34 2e       	mov	r3, r20
  b2:	45 2e       	mov	r4, r21
  b4:	56 2e       	mov	r5, r22
  b6:	b7 2f       	mov	r27, r23
  b8:	f8 2f       	mov	r31, r24
  ba:	e9 2f       	mov	r30, r25
  bc:	26 2d       	mov	r18, r6
  be:	37 2d       	mov	r19, r7
  c0:	48 2d       	mov	r20, r8
  c2:	59 2d       	mov	r21, r9
  c4:	6d 81       	ldd	r22, Y+5	; 0x05
  c6:	79 81       	ldd	r23, Y+1	; 0x01
  c8:	8a 81       	ldd	r24, Y+2	; 0x02
  ca:	9b 81       	ldd	r25, Y+3	; 0x03
  cc:	a4 e6       	ldi	r26, 0x64	; 100
  ce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__adddi3_s8>
  d2:	a2 2e       	mov	r10, r18
  d4:	b3 2e       	mov	r11, r19
  d6:	c4 2e       	mov	r12, r20
  d8:	d5 2e       	mov	r13, r21
  da:	e6 2e       	mov	r14, r22
  dc:	f7 2e       	mov	r15, r23
  de:	08 2f       	mov	r16, r24
  e0:	19 2f       	mov	r17, r25
  e2:	2c 81       	ldd	r18, Y+4	; 0x04
  e4:	32 2d       	mov	r19, r2
  e6:	43 2d       	mov	r20, r3
  e8:	54 2d       	mov	r21, r4
  ea:	65 2d       	mov	r22, r5
  ec:	7b 2f       	mov	r23, r27
  ee:	8f 2f       	mov	r24, r31
  f0:	9e 2f       	mov	r25, r30
  f2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__cmpdi2>
  f6:	c0 f2       	brcs	.-80     	; 0xa8 <main+0x2c>
		{
			PORTB = ~PORTB;
  f8:	88 b3       	in	r24, 0x18	; 24
  fa:	80 95       	com	r24
  fc:	88 bb       	out	0x18, r24	; 24
			speicher = millis_get();
  fe:	0e 94 d5 00 	call	0x1aa	; 0x1aa <millis_get>
 102:	62 2e       	mov	r6, r18
 104:	73 2e       	mov	r7, r19
 106:	84 2e       	mov	r8, r20
 108:	95 2e       	mov	r9, r21
 10a:	6d 83       	std	Y+5, r22	; 0x05
 10c:	79 83       	std	Y+1, r23	; 0x01
 10e:	8a 83       	std	Y+2, r24	; 0x02
 110:	9b 83       	std	Y+3, r25	; 0x03
 112:	ca cf       	rjmp	.-108    	; 0xa8 <main+0x2c>

00000114 <__vector_4>:
#include <avr/io.h>
#include <avr/interrupt.h>
static volatile uint64_t zaehler = 0;

ISR(TIMER2_COMP_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
	zaehler++; 
 130:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 134:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 138:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 13c:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 140:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 144:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 148:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 14c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 150:	a1 e0       	ldi	r26, 0x01	; 1
 152:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__adddi3_s8>
 156:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 15a:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15e:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 162:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 166:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 16a:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 16e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 172:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
}
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <millis_init>:

void millis_init()
{
	TCCR2 |= (1<<WGM21);
 192:	85 b5       	in	r24, 0x25	; 37
 194:	88 60       	ori	r24, 0x08	; 8
 196:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= (1 << CS22); //| (1 << CS22);  // Prescaler 64
 198:	85 b5       	in	r24, 0x25	; 37
 19a:	84 60       	ori	r24, 0x04	; 4
 19c:	85 bd       	out	0x25, r24	; 37
	OCR2 = 250;  // (16MHz / 64 / 1000) - 1
 19e:	8a ef       	ldi	r24, 0xFA	; 250
 1a0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1<<OCIE2);
 1a2:	89 b7       	in	r24, 0x39	; 57
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	89 bf       	out	0x39, r24	; 57
 1a8:	08 95       	ret

000001aa <millis_get>:

}

uint64_t millis_get()
{
	return zaehler;
 1aa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1b6:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1ba:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 1be:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1c2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 1c6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
}
 1ca:	08 95       	ret

000001cc <__adddi3_s8>:
 1cc:	00 24       	eor	r0, r0
 1ce:	a7 fd       	sbrc	r26, 7
 1d0:	00 94       	com	r0
 1d2:	2a 0f       	add	r18, r26
 1d4:	30 1d       	adc	r19, r0
 1d6:	40 1d       	adc	r20, r0
 1d8:	50 1d       	adc	r21, r0
 1da:	60 1d       	adc	r22, r0
 1dc:	70 1d       	adc	r23, r0
 1de:	80 1d       	adc	r24, r0
 1e0:	90 1d       	adc	r25, r0
 1e2:	08 95       	ret

000001e4 <__cmpdi2>:
 1e4:	2a 15       	cp	r18, r10
 1e6:	3b 05       	cpc	r19, r11
 1e8:	4c 05       	cpc	r20, r12
 1ea:	5d 05       	cpc	r21, r13
 1ec:	6e 05       	cpc	r22, r14
 1ee:	7f 05       	cpc	r23, r15
 1f0:	80 07       	cpc	r24, r16
 1f2:	91 07       	cpc	r25, r17
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
