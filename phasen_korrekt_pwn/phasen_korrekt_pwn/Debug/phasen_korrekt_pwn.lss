
phasen_korrekt_pwn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000676  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  0000089e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000291  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013a  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3c 00 	call	0x78	; 0x78 <main>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_init>:
	DDRB|=(1<<PB3);  //PB3 output
}

void PWM_set_duty(float prozent)
{
	OCR0 = (2.55 * prozent);
  6c:	82 e6       	ldi	r24, 0x62	; 98
  6e:	83 bf       	out	0x33, r24	; 51
  70:	87 b3       	in	r24, 0x17	; 23
  72:	88 60       	ori	r24, 0x08	; 8
  74:	87 bb       	out	0x17, r24	; 23
  76:	08 95       	ret

00000078 <main>:



int main(void)
{
	PWM_init();
  78:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_init>
	OCR0 = 0;
  7c:	1c be       	out	0x3c, r1	; 60
	int64_t duty = 0;
	int8_t direction = 1;
  7e:	77 24       	eor	r7, r7
  80:	73 94       	inc	r7

int main(void)
{
	PWM_init();
	OCR0 = 0;
	int64_t duty = 0;
  82:	a1 2c       	mov	r10, r1
  84:	b1 2c       	mov	r11, r1
  86:	c1 2c       	mov	r12, r1
  88:	d1 2c       	mov	r13, r1
  8a:	e1 2c       	mov	r14, r1
  8c:	f1 2c       	mov	r15, r1
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	61 2c       	mov	r6, r1

	
	/* Replace with your application code */
	while (1)
	{
		OCR0 = duty;
  92:	ac be       	out	0x3c, r10	; 60
		duty += direction;
  94:	27 2d       	mov	r18, r7
  96:	97 2d       	mov	r25, r7
  98:	99 0f       	add	r25, r25
  9a:	99 0b       	sbc	r25, r25
  9c:	39 2f       	mov	r19, r25
  9e:	49 2f       	mov	r20, r25
  a0:	59 2f       	mov	r21, r25
  a2:	69 2f       	mov	r22, r25
  a4:	79 2f       	mov	r23, r25
  a6:	89 2f       	mov	r24, r25
  a8:	16 2d       	mov	r17, r6
  aa:	0e 94 84 00 	call	0x108	; 0x108 <__adddi3>
  ae:	82 2e       	mov	r8, r18
  b0:	93 2e       	mov	r9, r19
  b2:	d4 2f       	mov	r29, r20
  b4:	c5 2f       	mov	r28, r21
  b6:	b6 2f       	mov	r27, r22
  b8:	a7 2f       	mov	r26, r23
  ba:	f8 2f       	mov	r31, r24
  bc:	e9 2f       	mov	r30, r25
  be:	a2 2e       	mov	r10, r18
  c0:	b3 2e       	mov	r11, r19
  c2:	c4 2e       	mov	r12, r20
  c4:	d5 2e       	mov	r13, r21
  c6:	e6 2e       	mov	r14, r22
  c8:	f7 2e       	mov	r15, r23
  ca:	08 2f       	mov	r16, r24
  cc:	69 2e       	mov	r6, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f e3       	ldi	r24, 0x3F	; 63
  d0:	9c e9       	ldi	r25, 0x9C	; 156
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x5a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x60>
  d8:	00 00       	nop
		_delay_ms(10);
		if (duty == 255 || duty == 0)
  da:	28 2d       	mov	r18, r8
  dc:	39 2d       	mov	r19, r9
  de:	4d 2f       	mov	r20, r29
  e0:	5c 2f       	mov	r21, r28
  e2:	6b 2f       	mov	r22, r27
  e4:	7a 2f       	mov	r23, r26
  e6:	8f 2f       	mov	r24, r31
  e8:	9e 2f       	mov	r25, r30
  ea:	2f 3f       	cpi	r18, 0xFF	; 255
  ec:	31 05       	cpc	r19, r1
  ee:	41 05       	cpc	r20, r1
  f0:	51 05       	cpc	r21, r1
  f2:	61 05       	cpc	r22, r1
  f4:	71 05       	cpc	r23, r1
  f6:	81 05       	cpc	r24, r1
  f8:	91 05       	cpc	r25, r1
  fa:	21 f0       	breq	.+8      	; 0x104 <main+0x8c>
  fc:	a0 e0       	ldi	r26, 0x00	; 0
  fe:	0e 94 8d 00 	call	0x11a	; 0x11a <__cmpdi2_s8>
 102:	39 f6       	brne	.-114    	; 0x92 <main+0x1a>
		{
			direction *= -1;
 104:	71 94       	neg	r7
 106:	c5 cf       	rjmp	.-118    	; 0x92 <main+0x1a>

00000108 <__adddi3>:
 108:	2a 0d       	add	r18, r10
 10a:	3b 1d       	adc	r19, r11
 10c:	4c 1d       	adc	r20, r12
 10e:	5d 1d       	adc	r21, r13
 110:	6e 1d       	adc	r22, r14
 112:	7f 1d       	adc	r23, r15
 114:	80 1f       	adc	r24, r16
 116:	91 1f       	adc	r25, r17
 118:	08 95       	ret

0000011a <__cmpdi2_s8>:
 11a:	00 24       	eor	r0, r0
 11c:	a7 fd       	sbrc	r26, 7
 11e:	00 94       	com	r0
 120:	2a 17       	cp	r18, r26
 122:	30 05       	cpc	r19, r0
 124:	40 05       	cpc	r20, r0
 126:	50 05       	cpc	r21, r0
 128:	60 05       	cpc	r22, r0
 12a:	70 05       	cpc	r23, r0
 12c:	80 05       	cpc	r24, r0
 12e:	90 05       	cpc	r25, r0
 130:	08 95       	ret

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
