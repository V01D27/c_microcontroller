
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000276  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab3  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e6  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044f  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ec  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  7a:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "UART.h"
#define MYUBRR (F_CPU/16L/BAUD)-1

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
  82:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	08 95       	ret

0000008e <ADC_Read>:

uint16_t ADC_Read(char channel)
{
	uint16_t Ain,AinLow;
	
	ADMUX &= 0xF0;
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	90 7f       	andi	r25, 0xF0	; 240
  92:	97 b9       	out	0x07, r25	; 7
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
  94:	97 b1       	in	r25, 0x07	; 7
  96:	8f 70       	andi	r24, 0x0F	; 15
  98:	98 2b       	or	r25, r24
  9a:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 64       	ori	r24, 0x40	; 64
  a0:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_Read+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	85 e3       	ldi	r24, 0x35	; 53
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <ADC_Read+0x1a>
  ac:	00 00       	nop
	
	_delay_us(10);
	AinLow = (uint16_t)ADCL;		/* Read lower byte*/
  ae:	24 b1       	in	r18, 0x04	; 4
	Ain = (uint16_t)ADCH*256;		/* Read higher 2 bits and 
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	98 2f       	mov	r25, r24
  b6:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain | AinLow;				
	return(Ain);			/* Return digital value*/
}
  b8:	82 2b       	or	r24, r18
  ba:	08 95       	ret

000000bc <main>:

 
int main()
{
	ADC_Init();
  bc:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	UART_init(BAUD9600);
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	95 e2       	ldi	r25, 0x25	; 37
  c4:	0e 94 85 00 	call	0x10a	; 0x10a <UART_init>
	
	while(1)
	{
		UART_sendINT(ADC_Read(0));
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
  ce:	0e 94 c5 00 	call	0x18a	; 0x18a <UART_sendINT>
		UART_sendChar(" ");
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 b4 00 	call	0x168	; 0x168 <UART_sendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	81 ee       	ldi	r24, 0xE1	; 225
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x24>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x2e>
  ea:	00 00       	nop
  ec:	ed cf       	rjmp	.-38     	; 0xc8 <main+0xc>

000000ee <__vector_13>:
#include <avr/interrupt.h>
#include <stdlib.h>


ISR (USART_RXC_vect)
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	uint8_t value = UDR;
  fa:	8c b1       	in	r24, 0x0c	; 12
	UDR = value;
  fc:	8c b9       	out	0x0c, r24	; 12
}
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <UART_init>:

void UART_init(int BAUD)
{
	UBRRH = (MYUBBR >> 8);
 10a:	09 2e       	mov	r0, r25
 10c:	00 0c       	add	r0, r0
 10e:	aa 0b       	sbc	r26, r26
 110:	bb 0b       	sbc	r27, r27
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	aa 1f       	adc	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	9c 01       	movw	r18, r24
 124:	ad 01       	movw	r20, r26
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	44 1f       	adc	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	22 0f       	add	r18, r18
 130:	33 1f       	adc	r19, r19
 132:	44 1f       	adc	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	74 e2       	ldi	r23, 0x24	; 36
 13a:	84 ef       	ldi	r24, 0xF4	; 244
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <__udivmodsi4>
 142:	da 01       	movw	r26, r20
 144:	c9 01       	movw	r24, r18
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	a1 09       	sbc	r26, r1
 14a:	b1 09       	sbc	r27, r1
 14c:	89 2f       	mov	r24, r25
 14e:	9a 2f       	mov	r25, r26
 150:	ab 2f       	mov	r26, r27
 152:	bb 27       	eor	r27, r27
 154:	80 bd       	out	0x20, r24	; 32
	UBRRL = MYUBBR;
 156:	21 50       	subi	r18, 0x01	; 1
 158:	29 b9       	out	0x09, r18	; 9
	
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	88 69       	ori	r24, 0x98	; 152
 15e:	8a b9       	out	0x0a, r24	; 10
	
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0) | (1 << URSEL);
 160:	80 b5       	in	r24, 0x20	; 32
 162:	86 68       	ori	r24, 0x86	; 134
 164:	80 bd       	out	0x20, r24	; 32
 166:	08 95       	ret

00000168 <UART_sendChar>:
}

void UART_sendChar(uint8_t valuetosend)
{
	while (!(UCSRA & (1 << UDRE)));
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <UART_sendChar>
	UDR = valuetosend;
 16c:	8c b9       	out	0x0c, r24	; 12
 16e:	08 95       	ret

00000170 <UART_sendString>:
}

void UART_sendString(char *valuetosend)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	while(*valuetosend)
 176:	03 c0       	rjmp	.+6      	; 0x17e <UART_sendString+0xe>
	{
		UART_sendChar(*valuetosend++);
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	0e 94 b4 00 	call	0x168	; 0x168 <UART_sendChar>
	UDR = valuetosend;
}

void UART_sendString(char *valuetosend)
{
	while(*valuetosend)
 17e:	88 81       	ld	r24, Y
 180:	81 11       	cpse	r24, r1
 182:	fa cf       	rjmp	.-12     	; 0x178 <UART_sendString+0x8>
	{
		UART_sendChar(*valuetosend++);
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <UART_sendINT>:

void UART_sendINT(int valuetosend)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
 192:	2c 97       	sbiw	r28, 0x0c	; 12
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 19e:	4a e0       	ldi	r20, 0x0A	; 10
 1a0:	be 01       	movw	r22, r28
 1a2:	6f 5f       	subi	r22, 0xFF	; 255
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	0e 94 04 01 	call	0x208	; 0x208 <__itoa_ncheck>
	char buffer[12];
	itoa(valuetosend, buffer, 10);
	UART_sendString(buffer);
 1aa:	ce 01       	movw	r24, r28
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	0e 94 b8 00 	call	0x170	; 0x170 <UART_sendString>
}
 1b2:	2c 96       	adiw	r28, 0x0c	; 12
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <__udivmodsi4>:
 1c4:	a1 e2       	ldi	r26, 0x21	; 33
 1c6:	1a 2e       	mov	r1, r26
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	fd 01       	movw	r30, r26
 1ce:	0d c0       	rjmp	.+26     	; 0x1ea <__udivmodsi4_ep>

000001d0 <__udivmodsi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	ee 1f       	adc	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	a2 17       	cp	r26, r18
 1da:	b3 07       	cpc	r27, r19
 1dc:	e4 07       	cpc	r30, r20
 1de:	f5 07       	cpc	r31, r21
 1e0:	20 f0       	brcs	.+8      	; 0x1ea <__udivmodsi4_ep>
 1e2:	a2 1b       	sub	r26, r18
 1e4:	b3 0b       	sbc	r27, r19
 1e6:	e4 0b       	sbc	r30, r20
 1e8:	f5 0b       	sbc	r31, r21

000001ea <__udivmodsi4_ep>:
 1ea:	66 1f       	adc	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	88 1f       	adc	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	1a 94       	dec	r1
 1f4:	69 f7       	brne	.-38     	; 0x1d0 <__udivmodsi4_loop>
 1f6:	60 95       	com	r22
 1f8:	70 95       	com	r23
 1fa:	80 95       	com	r24
 1fc:	90 95       	com	r25
 1fe:	9b 01       	movw	r18, r22
 200:	ac 01       	movw	r20, r24
 202:	bd 01       	movw	r22, r26
 204:	cf 01       	movw	r24, r30
 206:	08 95       	ret

00000208 <__itoa_ncheck>:
 208:	bb 27       	eor	r27, r27
 20a:	4a 30       	cpi	r20, 0x0A	; 10
 20c:	31 f4       	brne	.+12     	; 0x21a <__itoa_ncheck+0x12>
 20e:	99 23       	and	r25, r25
 210:	22 f4       	brpl	.+8      	; 0x21a <__itoa_ncheck+0x12>
 212:	bd e2       	ldi	r27, 0x2D	; 45
 214:	90 95       	com	r25
 216:	81 95       	neg	r24
 218:	9f 4f       	sbci	r25, 0xFF	; 255
 21a:	0c 94 10 01 	jmp	0x220	; 0x220 <__utoa_common>

0000021e <__utoa_ncheck>:
 21e:	bb 27       	eor	r27, r27

00000220 <__utoa_common>:
 220:	fb 01       	movw	r30, r22
 222:	55 27       	eor	r21, r21
 224:	aa 27       	eor	r26, r26
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	a4 17       	cp	r26, r20
 22e:	10 f0       	brcs	.+4      	; 0x234 <__utoa_common+0x14>
 230:	a4 1b       	sub	r26, r20
 232:	83 95       	inc	r24
 234:	50 51       	subi	r21, 0x10	; 16
 236:	b9 f7       	brne	.-18     	; 0x226 <__utoa_common+0x6>
 238:	a0 5d       	subi	r26, 0xD0	; 208
 23a:	aa 33       	cpi	r26, 0x3A	; 58
 23c:	08 f0       	brcs	.+2      	; 0x240 <__utoa_common+0x20>
 23e:	a9 5d       	subi	r26, 0xD9	; 217
 240:	a1 93       	st	Z+, r26
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	79 f7       	brne	.-34     	; 0x224 <__utoa_common+0x4>
 246:	b1 11       	cpse	r27, r1
 248:	b1 93       	st	Z+, r27
 24a:	11 92       	st	Z+, r1
 24c:	cb 01       	movw	r24, r22
 24e:	0c 94 29 01 	jmp	0x252	; 0x252 <strrev>

00000252 <strrev>:
 252:	dc 01       	movw	r26, r24
 254:	fc 01       	movw	r30, r24
 256:	67 2f       	mov	r22, r23
 258:	71 91       	ld	r23, Z+
 25a:	77 23       	and	r23, r23
 25c:	e1 f7       	brne	.-8      	; 0x256 <strrev+0x4>
 25e:	32 97       	sbiw	r30, 0x02	; 2
 260:	04 c0       	rjmp	.+8      	; 0x26a <strrev+0x18>
 262:	7c 91       	ld	r23, X
 264:	6d 93       	st	X+, r22
 266:	70 83       	st	Z, r23
 268:	62 91       	ld	r22, -Z
 26a:	ae 17       	cp	r26, r30
 26c:	bf 07       	cpc	r27, r31
 26e:	c8 f3       	brcs	.-14     	; 0x262 <strrev+0x10>
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
