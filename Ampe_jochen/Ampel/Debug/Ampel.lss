
Ampel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000721  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f4  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ff  00000000  00000000  00000f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setz_rot_gelb>:
    }
}

void setz_rot_gelb()
{
	PORTB = ROT | GELB;
  6c:	80 ec       	ldi	r24, 0xC0	; 192
  6e:	88 bb       	out	0x18, r24	; 24
  70:	08 95       	ret

00000072 <setz_rot>:
}

void setz_rot()
{
	PORTB = ROT;
  72:	80 e8       	ldi	r24, 0x80	; 128
  74:	88 bb       	out	0x18, r24	; 24
  76:	08 95       	ret

00000078 <setz_gruen>:
}

void setz_gruen()
{
	PORTB = GRUEN;
  78:	80 e2       	ldi	r24, 0x20	; 32
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	08 95       	ret

0000007e <setz_gelb>:
}


void setz_gelb()
{
	PORTB = GELB;
  7e:	80 e4       	ldi	r24, 0x40	; 64
  80:	88 bb       	out	0x18, r24	; 24
  82:	08 95       	ret

00000084 <sleep_1s>:
}

void sleep_1s(uint8_t faktor)
{
	for (int i = 0; i < faktor; i++)
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	0b c0       	rjmp	.+22     	; 0xa0 <sleep_1s+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	4f ef       	ldi	r20, 0xFF	; 255
  8c:	53 ed       	ldi	r21, 0xD3	; 211
  8e:	90 e3       	ldi	r25, 0x30	; 48
  90:	41 50       	subi	r20, 0x01	; 1
  92:	50 40       	sbci	r21, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <sleep_1s+0xc>
  98:	00 c0       	rjmp	.+0      	; 0x9a <sleep_1s+0x16>
  9a:	00 00       	nop
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	48 2f       	mov	r20, r24
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	24 17       	cp	r18, r20
  a6:	35 07       	cpc	r19, r21
  a8:	84 f3       	brlt	.-32     	; 0x8a <sleep_1s+0x6>
	{
		_delay_ms(1000);
	}
  aa:	08 95       	ret

000000ac <main>:
void setz_gruen();
void setz_gelb();

int main(void)
{
	DDRB = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 bb       	out	0x17, r24	; 23
	
    /* Replace with your application code */
    while (1) 
    {
		setz_rot();
  b0:	0e 94 39 00 	call	0x72	; 0x72 <setz_rot>
		sleep_1s(2);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 42 00 	call	0x84	; 0x84 <sleep_1s>
		setz_rot_gelb();
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <setz_rot_gelb>
		sleep_1s(1);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 42 00 	call	0x84	; 0x84 <sleep_1s>
		setz_gruen();
  c8:	0e 94 3c 00 	call	0x78	; 0x78 <setz_gruen>
		sleep_1s(2);
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 42 00 	call	0x84	; 0x84 <sleep_1s>
		setz_gelb();
  d4:	0e 94 3f 00 	call	0x7e	; 0x7e <setz_gelb>
		sleep_1s(1);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 42 00 	call	0x84	; 0x84 <sleep_1s>
  e0:	e7 cf       	rjmp	.-50     	; 0xb0 <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
