
lauflicht_mit_jocheb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ff  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000923  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00000eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000165  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  70:	18 ba       	out	0x18, r1	; 24
    /* Replace with your application code */
    while (1) 
    {
		
		for(uint8_t i = 0; i < 8; i++)
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	15 c0       	rjmp	.+42     	; 0xa0 <main+0x34>
		{
			PORTB |= (1 << i);
  76:	38 b3       	in	r19, 0x18	; 24
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	02 2e       	mov	r0, r18
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	0a 94       	dec	r0
  86:	e2 f7       	brpl	.-8      	; 0x80 <main+0x14>
  88:	83 2b       	or	r24, r19
  8a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	3f ef       	ldi	r19, 0xFF	; 255
  8e:	81 ee       	ldi	r24, 0xE1	; 225
  90:	94 e0       	ldi	r25, 0x04	; 4
  92:	31 50       	subi	r19, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x26>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x30>
  9c:	00 00       	nop
	PORTB = 0x00;
    /* Replace with your application code */
    while (1) 
    {
		
		for(uint8_t i = 0; i < 8; i++)
  9e:	2f 5f       	subi	r18, 0xFF	; 255
  a0:	28 30       	cpi	r18, 0x08	; 8
  a2:	48 f3       	brcs	.-46     	; 0x76 <main+0xa>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	16 c0       	rjmp	.+44     	; 0xd4 <main+0x68>
			_delay_ms(100);
		}

		for(uint8_t i = 0; i < 8; i++)
		{
			PORTB &= ~(1 << i);
  a8:	38 b3       	in	r19, 0x18	; 24
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 2e       	mov	r0, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x46>
  ba:	80 95       	com	r24
  bc:	83 23       	and	r24, r19
  be:	88 bb       	out	0x18, r24	; 24
  c0:	3f ef       	ldi	r19, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	31 50       	subi	r19, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
		{
			PORTB |= (1 << i);
			_delay_ms(100);
		}

		for(uint8_t i = 0; i < 8; i++)
  d2:	2f 5f       	subi	r18, 0xFF	; 255
  d4:	28 30       	cpi	r18, 0x08	; 8
  d6:	40 f3       	brcs	.-48     	; 0xa8 <main+0x3c>
  d8:	27 e0       	ldi	r18, 0x07	; 7
  da:	15 c0       	rjmp	.+42     	; 0x106 <main+0x9a>
		}
		
		
		for(int8_t i = 7; i >= 0; i--)
		{
			PORTB |= (1 << i);
  dc:	38 b3       	in	r19, 0x18	; 24
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 2e       	mov	r0, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x7e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x7a>
  ee:	83 2b       	or	r24, r19
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	3f ef       	ldi	r19, 0xFF	; 255
  f4:	81 ee       	ldi	r24, 0xE1	; 225
  f6:	94 e0       	ldi	r25, 0x04	; 4
  f8:	31 50       	subi	r19, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x8c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x96>
 102:	00 00       	nop
			PORTB &= ~(1 << i);
			_delay_ms(100);
		}
		
		
		for(int8_t i = 7; i >= 0; i--)
 104:	21 50       	subi	r18, 0x01	; 1
 106:	22 23       	and	r18, r18
 108:	4c f7       	brge	.-46     	; 0xdc <main+0x70>
 10a:	27 e0       	ldi	r18, 0x07	; 7
 10c:	16 c0       	rjmp	.+44     	; 0x13a <main+0xce>
			_delay_ms(100);
		}		
		
		for(int8_t i = 7; i >= 0; i--)
		{
			PORTB &= ~(1 << i);
 10e:	38 b3       	in	r19, 0x18	; 24
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0xb0>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <main+0xac>
 120:	80 95       	com	r24
 122:	83 23       	and	r24, r19
 124:	88 bb       	out	0x18, r24	; 24
 126:	3f ef       	ldi	r19, 0xFF	; 255
 128:	81 ee       	ldi	r24, 0xE1	; 225
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	31 50       	subi	r19, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xc0>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xca>
 136:	00 00       	nop
		{
			PORTB |= (1 << i);
			_delay_ms(100);
		}		
		
		for(int8_t i = 7; i >= 0; i--)
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	22 23       	and	r18, r18
 13c:	44 f7       	brge	.-48     	; 0x10e <main+0xa2>
 13e:	99 cf       	rjmp	.-206    	; 0x72 <main+0x6>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
