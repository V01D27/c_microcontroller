
TWIMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  0000034e  000003c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc9  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bc  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007e4  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b0  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e7  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002fbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  7a:	0c 94 a5 01 	jmp	0x34a	; 0x34a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	81 ee       	ldi	r24, 0xE1	; 225
  86:	94 e0       	ldi	r25, 0x04	; 4
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <I2C_Init+0x6>
  90:	00 c0       	rjmp	.+0      	; 0x92 <I2C_Init+0x10>
  92:	00 00       	nop
  94:	11 b8       	out	0x01, r1	; 1
  96:	88 e4       	ldi	r24, 0x48	; 72
  98:	80 b9       	out	0x00, r24	; 0
  9a:	84 e0       	ldi	r24, 0x04	; 4
  9c:	86 bf       	out	0x36, r24	; 54
  9e:	08 95       	ret

000000a0 <I2C_Start>:
  a0:	94 ea       	ldi	r25, 0xA4	; 164
  a2:	96 bf       	out	0x36, r25	; 54
  a4:	06 b6       	in	r0, 0x36	; 54
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <I2C_Start+0x4>
  aa:	91 b1       	in	r25, 0x01	; 1
  ac:	98 7f       	andi	r25, 0xF8	; 248
  ae:	98 30       	cpi	r25, 0x08	; 8
  b0:	71 f4       	brne	.+28     	; 0xce <I2C_Start+0x2e>
  b2:	83 b9       	out	0x03, r24	; 3
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	86 bf       	out	0x36, r24	; 54
  b8:	06 b6       	in	r0, 0x36	; 54
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <I2C_Start+0x18>
  be:	81 b1       	in	r24, 0x01	; 1
  c0:	88 7f       	andi	r24, 0xF8	; 248
  c2:	88 31       	cpi	r24, 0x18	; 24
  c4:	31 f0       	breq	.+12     	; 0xd2 <I2C_Start+0x32>
  c6:	80 32       	cpi	r24, 0x20	; 32
  c8:	31 f4       	brne	.+12     	; 0xd6 <I2C_Start+0x36>
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	08 95       	ret
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	08 95       	ret
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	08 95       	ret
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	08 95       	ret

000000da <I2C_Repeated_Start>:
  da:	94 ea       	ldi	r25, 0xA4	; 164
  dc:	96 bf       	out	0x36, r25	; 54
  de:	06 b6       	in	r0, 0x36	; 54
  e0:	07 fe       	sbrs	r0, 7
  e2:	fd cf       	rjmp	.-6      	; 0xde <I2C_Repeated_Start+0x4>
  e4:	91 b1       	in	r25, 0x01	; 1
  e6:	98 7f       	andi	r25, 0xF8	; 248
  e8:	90 31       	cpi	r25, 0x10	; 16
  ea:	71 f4       	brne	.+28     	; 0x108 <I2C_Repeated_Start+0x2e>
  ec:	83 b9       	out	0x03, r24	; 3
  ee:	84 e8       	ldi	r24, 0x84	; 132
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	07 fe       	sbrs	r0, 7
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <I2C_Repeated_Start+0x18>
  f8:	81 b1       	in	r24, 0x01	; 1
  fa:	88 7f       	andi	r24, 0xF8	; 248
  fc:	80 34       	cpi	r24, 0x40	; 64
  fe:	31 f0       	breq	.+12     	; 0x10c <I2C_Repeated_Start+0x32>
 100:	80 32       	cpi	r24, 0x20	; 32
 102:	31 f4       	brne	.+12     	; 0x110 <I2C_Repeated_Start+0x36>
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	08 95       	ret
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	08 95       	ret

00000114 <I2C_Stop>:
 114:	84 e9       	ldi	r24, 0x94	; 148
 116:	86 bf       	out	0x36, r24	; 54
 118:	06 b6       	in	r0, 0x36	; 54
 11a:	04 fc       	sbrc	r0, 4
 11c:	fd cf       	rjmp	.-6      	; 0x118 <I2C_Stop+0x4>
 11e:	08 95       	ret

00000120 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 120:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 126:	06 b6       	in	r0, 0x36	; 54
 128:	07 fe       	sbrs	r0, 7
 12a:	fd cf       	rjmp	.-6      	; 0x126 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 12c:	81 b1       	in	r24, 0x01	; 1
 12e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 130:	88 32       	cpi	r24, 0x28	; 40
 132:	21 f0       	breq	.+8      	; 0x13c <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 134:	80 33       	cpi	r24, 0x30	; 48
 136:	21 f4       	brne	.+8      	; 0x140 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 140:	82 e0       	ldi	r24, 0x02	; 2
}
 142:	08 95       	ret

00000144 <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 144:	84 ec       	ldi	r24, 0xC4	; 196
 146:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 148:	06 b6       	in	r0, 0x36	; 54
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
 14e:	83 b1       	in	r24, 0x03	; 3
}	
 150:	08 95       	ret

00000152 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 156:	06 b6       	in	r0, 0x36	; 54
 158:	07 fe       	sbrs	r0, 7
 15a:	fd cf       	rjmp	.-6      	; 0x156 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
 15c:	83 b1       	in	r24, 0x03	; 3
}	
 15e:	08 95       	ret

00000160 <main>:

#define Slave_Write_Address		0x20
#define Slave_Read_Address		0x21
#define	count				10
int main()
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	2a 97       	sbiw	r28, 0x0a	; 10
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	
	usart_Init();			/* Initialize LCD */
 174:	0e 94 26 01 	call	0x24c	; 0x24c <usart_Init>
	I2C_Init();			/* Initialize I2C */
 178:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
	
	usart_sendStringNewLine( "Master Device");
 17c:	80 e6       	ldi	r24, 0x60	; 96
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 44 01 	call	0x288	; 0x288 <usart_sendStringNewLine>
	
	while (1)
	{
		usart_sendStringNewLine(  "Sending :       ");
 184:	8e e6       	ldi	r24, 0x6E	; 110
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 44 01 	call	0x288	; 0x288 <usart_sendStringNewLine>
		int error = I2C_Start(Slave_Write_Address);/* Start I2C with SLA+W */  // <--- this here is causing issues rn
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	0e 94 50 00 	call	0xa0	; 0xa0 <I2C_Start>
		usart_sendStringNewLine(error);
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 44 01 	call	0x288	; 0x288 <usart_sendStringNewLine>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	8f e1       	ldi	r24, 0x1F	; 31
 19a:	9e e4       	ldi	r25, 0x4E	; 78
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x3c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x42>
 1a2:	00 00       	nop
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <main+0x7a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1a8:	4a e0       	ldi	r20, 0x0A	; 10
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	81 2f       	mov	r24, r17
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
		{
			//sprintf(buffer, "%d    ",i);
			itoa(i,buffer,10);
			usart_sendStringNewLine( buffer);
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	0e 94 44 01 	call	0x288	; 0x288 <usart_sendStringNewLine>
			I2C_Write(i);	/* Send Incrementing count */
 1c0:	81 2f       	mov	r24, r17
 1c2:	0e 94 90 00 	call	0x120	; 0x120 <I2C_Write>
 1c6:	9f ef       	ldi	r25, 0xFF	; 255
 1c8:	29 e6       	ldi	r18, 0x69	; 105
 1ca:	88 e1       	ldi	r24, 0x18	; 24
 1cc:	91 50       	subi	r25, 0x01	; 1
 1ce:	20 40       	sbci	r18, 0x00	; 0
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x6c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x76>
 1d6:	00 00       	nop
	{
		usart_sendStringNewLine(  "Sending :       ");
		int error = I2C_Start(Slave_Write_Address);/* Start I2C with SLA+W */  // <--- this here is causing issues rn
		usart_sendStringNewLine(error);
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
 1d8:	1f 5f       	subi	r17, 0xFF	; 255
 1da:	1a 30       	cpi	r17, 0x0A	; 10
 1dc:	28 f3       	brcs	.-54     	; 0x1a8 <main+0x48>
			itoa(i,buffer,10);
			usart_sendStringNewLine( buffer);
			I2C_Write(i);	/* Send Incrementing count */
			_delay_ms(500);
		}
		usart_sendStringNewLine(  "Receiving :       ");
 1de:	8f e7       	ldi	r24, 0x7F	; 127
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 44 01 	call	0x288	; 0x288 <usart_sendStringNewLine>
		I2C_Repeated_Start(Slave_Read_Address);/* Repeated Start with SLA+R */
 1e6:	81 e2       	ldi	r24, 0x21	; 33
 1e8:	0e 94 6d 00 	call	0xda	; 0xda <I2C_Repeated_Start>
 1ec:	8f e1       	ldi	r24, 0x1F	; 31
 1ee:	9e e4       	ldi	r25, 0x4E	; 78
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x90>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x96>
 1f6:	00 00       	nop
		_delay_ms(5);
		for (uint8_t i = 0; i < count; i++)
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	23 c0       	rjmp	.+70     	; 0x242 <main+0xe2>
		{
			if(i < count - 1)
 1fc:	19 30       	cpi	r17, 0x09	; 9
 1fe:	50 f4       	brcc	.+20     	; 0x214 <main+0xb4>
				itoa(I2C_Read_Ack(),buffer,10);
 200:	0e 94 a2 00 	call	0x144	; 0x144 <I2C_Read_Ack>
 204:	4a e0       	ldi	r20, 0x0A	; 10
 206:	be 01       	movw	r22, r28
 208:	6f 5f       	subi	r22, 0xFF	; 255
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
 212:	09 c0       	rjmp	.+18     	; 0x226 <main+0xc6>
			
			else
				itoa(I2C_Read_Nack(),buffer,10);
 214:	0e 94 a9 00 	call	0x152	; 0x152 <I2C_Read_Nack>
 218:	4a e0       	ldi	r20, 0x0A	; 10
 21a:	be 01       	movw	r22, r28
 21c:	6f 5f       	subi	r22, 0xFF	; 255
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__itoa_ncheck>
			usart_sendStringNewLine(  buffer);
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 44 01 	call	0x288	; 0x288 <usart_sendStringNewLine>
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	29 e6       	ldi	r18, 0x69	; 105
 232:	88 e1       	ldi	r24, 0x18	; 24
 234:	91 50       	subi	r25, 0x01	; 1
 236:	20 40       	sbci	r18, 0x00	; 0
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <main+0xd4>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0xde>
 23e:	00 00       	nop
			_delay_ms(500);
		}
		usart_sendStringNewLine(  "Receiving :       ");
		I2C_Repeated_Start(Slave_Read_Address);/* Repeated Start with SLA+R */
		_delay_ms(5);
		for (uint8_t i = 0; i < count; i++)
 240:	1f 5f       	subi	r17, 0xFF	; 255
 242:	1a 30       	cpi	r17, 0x0A	; 10
 244:	d8 f2       	brcs	.-74     	; 0x1fc <main+0x9c>
			else
				itoa(I2C_Read_Nack(),buffer,10);
			usart_sendStringNewLine(  buffer);
			_delay_ms(500);
		}
		I2C_Stop();		/* Stop I2C */
 246:	0e 94 8a 00 	call	0x114	; 0x114 <I2C_Stop>
	}
 24a:	9c cf       	rjmp	.-200    	; 0x184 <main+0x24>

0000024c <usart_Init>:
 24c:	10 bc       	out	0x20, r1	; 32
 24e:	87 e6       	ldi	r24, 0x67	; 103
 250:	89 b9       	out	0x09, r24	; 9
 252:	8a b1       	in	r24, 0x0a	; 10
 254:	88 61       	ori	r24, 0x18	; 24
 256:	8a b9       	out	0x0a, r24	; 10
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 68       	ori	r24, 0x80	; 128
 25c:	8a b9       	out	0x0a, r24	; 10
 25e:	80 b5       	in	r24, 0x20	; 32
 260:	86 68       	ori	r24, 0x86	; 134
 262:	80 bd       	out	0x20, r24	; 32
 264:	08 95       	ret

00000266 <usart_sendChar>:
 266:	5d 9b       	sbis	0x0b, 5	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <usart_sendChar>
 26a:	8c b9       	out	0x0c, r24	; 12
 26c:	08 95       	ret

0000026e <usart_sendString>:
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
 274:	03 c0       	rjmp	.+6      	; 0x27c <usart_sendString+0xe>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	0e 94 33 01 	call	0x266	; 0x266 <usart_sendChar>
 27c:	88 81       	ld	r24, Y
 27e:	81 11       	cpse	r24, r1
 280:	fa cf       	rjmp	.-12     	; 0x276 <usart_sendString+0x8>
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <usart_sendStringNewLine>:
 288:	0e 94 37 01 	call	0x26e	; 0x26e <usart_sendString>
 28c:	82 e9       	ldi	r24, 0x92	; 146
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 37 01 	call	0x26e	; 0x26e <usart_sendString>
 294:	08 95       	ret

00000296 <__vector_13>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
 2b8:	8c b1       	in	r24, 0x0c	; 12
 2ba:	0e 94 33 01 	call	0x266	; 0x266 <usart_sendChar>
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__itoa_ncheck>:
 2e0:	bb 27       	eor	r27, r27
 2e2:	4a 30       	cpi	r20, 0x0A	; 10
 2e4:	31 f4       	brne	.+12     	; 0x2f2 <__itoa_ncheck+0x12>
 2e6:	99 23       	and	r25, r25
 2e8:	22 f4       	brpl	.+8      	; 0x2f2 <__itoa_ncheck+0x12>
 2ea:	bd e2       	ldi	r27, 0x2D	; 45
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__utoa_common>

000002f6 <__utoa_ncheck>:
 2f6:	bb 27       	eor	r27, r27

000002f8 <__utoa_common>:
 2f8:	fb 01       	movw	r30, r22
 2fa:	55 27       	eor	r21, r21
 2fc:	aa 27       	eor	r26, r26
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	a4 17       	cp	r26, r20
 306:	10 f0       	brcs	.+4      	; 0x30c <__utoa_common+0x14>
 308:	a4 1b       	sub	r26, r20
 30a:	83 95       	inc	r24
 30c:	50 51       	subi	r21, 0x10	; 16
 30e:	b9 f7       	brne	.-18     	; 0x2fe <__utoa_common+0x6>
 310:	a0 5d       	subi	r26, 0xD0	; 208
 312:	aa 33       	cpi	r26, 0x3A	; 58
 314:	08 f0       	brcs	.+2      	; 0x318 <__utoa_common+0x20>
 316:	a9 5d       	subi	r26, 0xD9	; 217
 318:	a1 93       	st	Z+, r26
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	79 f7       	brne	.-34     	; 0x2fc <__utoa_common+0x4>
 31e:	b1 11       	cpse	r27, r1
 320:	b1 93       	st	Z+, r27
 322:	11 92       	st	Z+, r1
 324:	cb 01       	movw	r24, r22
 326:	0c 94 95 01 	jmp	0x32a	; 0x32a <strrev>

0000032a <strrev>:
 32a:	dc 01       	movw	r26, r24
 32c:	fc 01       	movw	r30, r24
 32e:	67 2f       	mov	r22, r23
 330:	71 91       	ld	r23, Z+
 332:	77 23       	and	r23, r23
 334:	e1 f7       	brne	.-8      	; 0x32e <strrev+0x4>
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	04 c0       	rjmp	.+8      	; 0x342 <strrev+0x18>
 33a:	7c 91       	ld	r23, X
 33c:	6d 93       	st	X+, r22
 33e:	70 83       	st	Z, r23
 340:	62 91       	ld	r22, -Z
 342:	ae 17       	cp	r26, r30
 344:	bf 07       	cpc	r27, r31
 346:	c8 f3       	brcs	.-14     	; 0x33a <strrev+0x10>
 348:	08 95       	ret

0000034a <_exit>:
 34a:	f8 94       	cli

0000034c <__stop_program>:
 34c:	ff cf       	rjmp	.-2      	; 0x34c <__stop_program>
