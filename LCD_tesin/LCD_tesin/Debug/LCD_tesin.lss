
LCD_tesin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000add  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b1  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000410  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000451  00000000  00000000  00001d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  7a:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD4_enable>:
#include "lcd_lib.h"


void LCD4_enable()
{
	LCD_DATA |= (1<<en);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	84 60       	ori	r24, 0x04	; 4
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e9       	ldi	r24, 0x9F	; 159
  8a:	9f e0       	ldi	r25, 0x0F	; 15
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD4_enable+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD4_enable+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	LCD_DATA &= ~(1<<en);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e1       	ldi	r24, 0x1F	; 31
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <LCD4_enable+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <LCD4_enable+0x22>
  a4:	00 00       	nop
  a6:	08 95       	ret

000000a8 <LCD4_cmd>:
	_delay_us(200);
}

void LCD4_cmd(unsigned char cmd)
{
  a8:	cf 93       	push	r28
  aa:	c8 2f       	mov	r28, r24
	// Send upper nibble
	LCD_DATA = (LCD_DATA & 0x0F) | (cmd & 0xF0);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	9c 2f       	mov	r25, r28
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	89 2b       	or	r24, r25
  b6:	88 bb       	out	0x18, r24	; 24
	LCD_DATA &= ~(1<<rs);  // RS = 0 for command
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	88 bb       	out	0x18, r24	; 24
	
	LCD4_enable();
  be:	0e 94 41 00 	call	0x82	; 0x82 <LCD4_enable>
	
	// Send lower nibble
	LCD_DATA = (LCD_DATA & 0x0F) | ((cmd << 4) & 0xF0);
  c2:	28 b3       	in	r18, 0x18	; 24
  c4:	30 e1       	ldi	r19, 0x10	; 16
  c6:	c3 9f       	mul	r28, r19
  c8:	c0 01       	movw	r24, r0
  ca:	11 24       	eor	r1, r1
  cc:	92 2f       	mov	r25, r18
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	89 2b       	or	r24, r25
  d2:	88 bb       	out	0x18, r24	; 24
	
	LCD4_enable();
  d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD4_enable>
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD4_write>:

void LCD4_write(unsigned char data)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	// Send upper nibble
	LCD_DATA = (LCD_DATA & 0x0F) | (data & 0xF0);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	9c 2f       	mov	r25, r28
  e6:	90 7f       	andi	r25, 0xF0	; 240
  e8:	89 2b       	or	r24, r25
  ea:	88 bb       	out	0x18, r24	; 24
	LCD_DATA |= (1<<rs);  // RS = 1 for data
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	88 bb       	out	0x18, r24	; 24
	
	LCD4_enable();
  f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD4_enable>
	
	// Send lower nibble
	LCD_DATA = (LCD_DATA & 0x0F) | ((data << 4) & 0xF0);
  f6:	28 b3       	in	r18, 0x18	; 24
  f8:	30 e1       	ldi	r19, 0x10	; 16
  fa:	c3 9f       	mul	r28, r19
  fc:	c0 01       	movw	r24, r0
  fe:	11 24       	eor	r1, r1
 100:	92 2f       	mov	r25, r18
 102:	9f 70       	andi	r25, 0x0F	; 15
 104:	89 2b       	or	r24, r25
 106:	88 bb       	out	0x18, r24	; 24
	
	LCD4_enable();
 108:	0e 94 41 00 	call	0x82	; 0x82 <LCD4_enable>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <LCD4_init>:


void LCD4_init()
{
	LCD_DDR = 0xFF;  // Set LCD port as output
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	89 ef       	ldi	r24, 0xF9	; 249
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <LCD4_init+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD4_init+0x14>
 124:	00 00       	nop
	_delay_ms(20);   // Wait for LCD to power up
	
	// Initialize in 4-bit mode
	LCD4_cmd(DDRAMADRESS_1);
 126:	83 e3       	ldi	r24, 0x33	; 51
 128:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD4_init+0x20>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD4_init+0x26>
 136:	00 00       	nop
	_delay_ms(5);
	LCD4_cmd(DDRAMADRESS_2);
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD4_init+0x32>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD4_init+0x38>
 148:	00 00       	nop
	_delay_ms(2);
	LCD4_cmd(TWO_LINES);  // 4-bit mode, 2 lines, 5x8 font
 14a:	88 e2       	ldi	r24, 0x28	; 40
 14c:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9f e1       	ldi	r25, 0x1F	; 31
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD4_init+0x44>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD4_init+0x4a>
 15a:	00 00       	nop
	_delay_ms(2);
	LCD4_cmd(DISPLAY_ON);  // Display on, cursor off
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9f e1       	ldi	r25, 0x1F	; 31
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD4_init+0x56>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD4_init+0x5c>
 16c:	00 00       	nop
	_delay_ms(2);
	LCD4_cmd(INSERT_MODE);  // Increment cursor
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9f e1       	ldi	r25, 0x1F	; 31
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD4_init+0x68>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD4_init+0x6e>
 17e:	00 00       	nop
	_delay_ms(2);
	LCD4_cmd(CLEAR);  // Clear display
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	9f e1       	ldi	r25, 0x1F	; 31
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD4_init+0x7a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <LCD4_init+0x80>
 190:	00 00       	nop
 192:	08 95       	ret

00000194 <LCD4_write_string>:
	_delay_ms(2);
}


void LCD4_write_string(const char *data)
{
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	8c 01       	movw	r16, r24
	
	int n=0;
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
	while(data[n])
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <LCD4_write_string+0x22>
	{
		LCD4_write(data[n]);
 1a4:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD4_write>
		n++;
 1a8:	21 96       	adiw	r28, 0x01	; 1
		if (n==16)
 1aa:	c0 31       	cpi	r28, 0x10	; 16
 1ac:	d1 05       	cpc	r29, r1
 1ae:	19 f4       	brne	.+6      	; 0x1b6 <LCD4_write_string+0x22>
		{
			LCD4_cmd(NEXT_LINE);
 1b0:	80 ec       	ldi	r24, 0xC0	; 192
 1b2:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>

void LCD4_write_string(const char *data)
{
	
	int n=0;
	while(data[n])
 1b6:	f8 01       	movw	r30, r16
 1b8:	ec 0f       	add	r30, r28
 1ba:	fd 1f       	adc	r31, r29
 1bc:	80 81       	ld	r24, Z
 1be:	81 11       	cpse	r24, r1
 1c0:	f1 cf       	rjmp	.-30     	; 0x1a4 <LCD4_write_string+0x10>
		if (n==16)
		{
			LCD4_cmd(NEXT_LINE);
		}
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	08 95       	ret

000001cc <LCD4_gotoxy>:

void LCD4_gotoxy(int x, int y)
{
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	18 2f       	mov	r17, r24
 1d4:	eb 01       	movw	r28, r22
	
	if (y==0)
 1d6:	20 97       	sbiw	r28, 0x00	; 0
 1d8:	21 f4       	brne	.+8      	; 0x1e2 <LCD4_gotoxy+0x16>
	{
		LCD4_cmd(FIRST_LINE+x);
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	81 0f       	add	r24, r17
 1de:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
	}
	if (y==1)
 1e2:	21 97       	sbiw	r28, 0x01	; 1
 1e4:	21 f4       	brne	.+8      	; 0x1ee <LCD4_gotoxy+0x22>
	{
		LCD4_cmd(SECOND_LINE+x);
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
 1e8:	81 0f       	add	r24, r17
 1ea:	0e 94 54 00 	call	0xa8	; 0xa8 <LCD4_cmd>
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	08 95       	ret

000001f6 <main>:
#include <avr/io.h>
#include "lcd_lib.h"

int main(void)
{
	LCD4_init();
 1f6:	0e 94 88 00 	call	0x110	; 0x110 <LCD4_init>
	LCD4_write_string("Hallo Welt");
 1fa:	80 e6       	ldi	r24, 0x60	; 96
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 ca 00 	call	0x194	; 0x194 <LCD4_write_string>
	LCD4_gotoxy(0, 1);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD4_gotoxy>
	LCD4_write_string("Hallo Universum");
 20e:	8b e6       	ldi	r24, 0x6B	; 107
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 ca 00 	call	0x194	; 0x194 <LCD4_write_string>
 216:	ff cf       	rjmp	.-2      	; 0x216 <main+0x20>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
