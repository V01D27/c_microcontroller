
serial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000970  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ed  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037c  00000000  00000000  00001345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  00001c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001f55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  8a:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <herbert>:
#define F_CPU 16000000UL

#include "serial.h"

void herbert(uint8_t value) {
	serial_send_char(value);
  92:	0e 94 9f 00 	call	0x13e	; 0x13e <serial_send_char>
  96:	08 95       	ret

00000098 <main>:
}

int main(void)
{
	serial_init(herbert, BAUD9600);
  98:	60 e8       	ldi	r22, 0x80	; 128
  9a:	75 e2       	ldi	r23, 0x25	; 37
  9c:	89 e4       	ldi	r24, 0x49	; 73
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 7e 00 	call	0xfc	; 0xfc <serial_init>

	sei();
  a4:	78 94       	sei
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0xe>

000000a8 <__vector_13>:
#define BAUD9600 9600
#define MYUBRR ((F_CPU/16L/BAUD)-1)
static charhandler fptr;

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	if(fptr != NULL)
  ca:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ce:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	30 97       	sbiw	r30, 0x00	; 0
  d4:	11 f0       	breq	.+4      	; 0xda <__vector_13+0x32>
		fptr(UDR);
  d6:	8c b1       	in	r24, 0x0c	; 12
  d8:	09 95       	icall
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <serial_init>:

void serial_init(charhandler myfunction, int BAUD)
{
	fptr = myfunction;
  fc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 100:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		// Baudrate setzen
	UBRRH = (MYUBRR >> 8);  // Obere 8 Bits des Baud-Rate-Wertes
 104:	9b 01       	movw	r18, r22
 106:	77 0f       	add	r23, r23
 108:	44 0b       	sbc	r20, r20
 10a:	55 0b       	sbc	r21, r21
 10c:	60 e4       	ldi	r22, 0x40	; 64
 10e:	72 e4       	ldi	r23, 0x42	; 66
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 a3 00 	call	0x146	; 0x146 <__udivmodsi4>
 118:	da 01       	movw	r26, r20
 11a:	c9 01       	movw	r24, r18
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	a1 09       	sbc	r26, r1
 120:	b1 09       	sbc	r27, r1
 122:	89 2f       	mov	r24, r25
 124:	9a 2f       	mov	r25, r26
 126:	ab 2f       	mov	r26, r27
 128:	bb 27       	eor	r27, r27
 12a:	80 bd       	out	0x20, r24	; 32
	UBRRL = (MYUBRR);       // Untere 8 Bits des Baud-Rate-Wertes
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	29 b9       	out	0x09, r18	; 9

	// USART Empfänger und Sender aktivieren sowie Empfangs-Interrupt einschalten
	UCSRB |= (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
 130:	8a b1       	in	r24, 0x0a	; 10
 132:	88 69       	ori	r24, 0x98	; 152
 134:	8a b9       	out	0x0a, r24	; 10

	// Rahmenformat einstellen: 8 Datenbits, 1 Stoppbit, keine Parität
	UCSRC |= (1 << UCSZ1) | (1 << UCSZ0)| (1 << URSEL);
 136:	80 b5       	in	r24, 0x20	; 32
 138:	86 68       	ori	r24, 0x86	; 134
 13a:	80 bd       	out	0x20, r24	; 32
 13c:	08 95       	ret

0000013e <serial_send_char>:
	
}

void serial_send_char(uint8_t value_to_send)
{
	while (!(UCSRA & (1 << UDRE)));
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <serial_send_char>
	UDR = value_to_send;
 142:	8c b9       	out	0x0c, r24	; 12
 144:	08 95       	ret

00000146 <__udivmodsi4>:
 146:	a1 e2       	ldi	r26, 0x21	; 33
 148:	1a 2e       	mov	r1, r26
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	fd 01       	movw	r30, r26
 150:	0d c0       	rjmp	.+26     	; 0x16c <__udivmodsi4_ep>

00000152 <__udivmodsi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	ee 1f       	adc	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	a2 17       	cp	r26, r18
 15c:	b3 07       	cpc	r27, r19
 15e:	e4 07       	cpc	r30, r20
 160:	f5 07       	cpc	r31, r21
 162:	20 f0       	brcs	.+8      	; 0x16c <__udivmodsi4_ep>
 164:	a2 1b       	sub	r26, r18
 166:	b3 0b       	sbc	r27, r19
 168:	e4 0b       	sbc	r30, r20
 16a:	f5 0b       	sbc	r31, r21

0000016c <__udivmodsi4_ep>:
 16c:	66 1f       	adc	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	88 1f       	adc	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	1a 94       	dec	r1
 176:	69 f7       	brne	.-38     	; 0x152 <__udivmodsi4_loop>
 178:	60 95       	com	r22
 17a:	70 95       	com	r23
 17c:	80 95       	com	r24
 17e:	90 95       	com	r25
 180:	9b 01       	movw	r18, r22
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	cf 01       	movw	r24, r30
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
